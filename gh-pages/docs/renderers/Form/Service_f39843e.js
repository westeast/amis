define('docs/renderers/Form/Service.md', function(require, exports, module) {

  module.exports = {
    "html": "<h3><a class=\"anchor\" name=\"service-formitem-\" href=\"#service-formitem-\" aria-hidden=\"true\"><svg aria-hidden=\"true\" class=\"octicon octicon-link\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Service(FormItem)</h3><p>请先参考Form外的<a href=\"/amis/docs/renderers/Service\">Service</a>用法。作为 FormItem 使用时最大的不同在于作为容器渲染器，他的孩子是优先用表单项还是非表单项。比如放置一个 <code>{type: &#39;text&#39;}</code>，是渲染一个文本输入框、还是一个文本展示？</p>\n<p>两种都存在可能，所以作为表单项的 Service, 有两种用法，当把孩子节点放在 <code>controls</code> 里面时输出表单项，如果放在 <code>body</code> 底下时输出非表单项。</p>\n<div class=\"amis-preview\" style=\"height: 400px\"><script type=\"text/schema\" height=\"400\" scope=\"form-item\">{\n    \"type\": \"service\",\n    \"api\": \"https://houtai.baidu.com/api/mock2/page/initData\",\n    \"body\": {\n        \"type\": \"text\",\n        \"text\": \"现在是：${date}\"\n    }\n}\n</script></div>\n<p>如果把子节点放在 <code>controls</code> 就输出表单项如：</p>\n<div class=\"amis-preview\" style=\"height: 700px\"><script type=\"text/schema\" height=\"700\" scope=\"form-item\">{\n    \"type\": \"service\",\n    \"api\": \"https://houtai.baidu.com/api/mock2/page/initData\",\n    \"controls\": [\n      {\n          \"type\": \"text\",\n          \"label\": \"文本输入\",\n          \"name\": \"a\"\n      },\n\n      {\n        \"type\": \"date\",\n        \"label\": \"日期\",\n        \"name\": \"date\",\n        \"format\": \"YYYY-MM-DD\"\n      }\n    ]\n}\n</script></div>\n<p>从上面的栗子还可以发现，表单项的值是由 service 的 api 拉取过来的，也就是说，你可以利用 service 实现动态拉取部分表单项数据。</p>\n<p>比如：</p>\n<div class=\"amis-preview\" style=\"height: 700px\"><script type=\"text/schema\" height=\"700\" scope=\"form\">[\n  {\n    \"label\": \"数据模板\",\n    \"type\": \"select\",\n    \"labelClassName\": \"text-muted\",\n    \"name\": \"tpl\",\n    \"value\": \"tpl1\",\n    \"inline\": true,\n    \"options\": [\n      {\n        \"label\": \"模板1\",\n        \"value\": \"tpl1\"\n      },\n      {\n        \"label\": \"模板2\",\n        \"value\": \"tpl2\"\n      },\n      {\n        \"label\": \"模板3\",\n        \"value\": \"tpl3\"\n      }\n    ],\n    \"description\": \"<span class=\\\"text-danger\\\">请修改这里看效果</span>\"\n  },\n  {\n    \"type\": \"service\",\n    \"api\": \"https://houtai.baidu.com/api/mock2/form/initData?tpl=${tpl}\",\n    \"controls\": [\n      {\n        \"label\": \"名称\",\n        \"type\": \"text\",\n        \"labelClassName\": \"text-muted\",\n        \"name\": \"name\"\n      },\n      {\n        \"label\": \"作者\",\n        \"type\": \"text\",\n        \"labelClassName\": \"text-muted\",\n        \"name\": \"author\"\n      },\n      {\n        \"label\": \"请求时间\",\n        \"type\": \"datetime\",\n        \"labelClassName\": \"text-muted\",\n        \"name\": \"date\"\n      }\n    ]\n  }\n]\n</script></div>\n<p>注意：为什么修改数据模板的时候会自动让下面的 service 重新拉取数据？因为 service 的 api 是 <code>/api/mock2/form/initData?tpl=${tpl}</code>，amis 有个机制就是，当 api 地址值发生变化时就会重新拉取，当修改数据模板的时候，form 底下 tpl 变量会发生改变，然后会导致 api 的计算结果发生变化，然后会让 service 重新拉取。 那怎样不自动拉取？换种写法就行，比如把上面的 api 换成 <code>{method: &quot;get&quot;, url: &quot;/api/mock2/form/initData&quot;, data: {tpl: &quot;${tpl}&quot;}}</code> 这种写法就不会自动刷新了，因为 <code>/api/mock2/form/initData</code> 是一个不会发生变化的值了。更多内容请查看<a href=\"/amis/docs/advanced#数据联动\">联动说明</a></p>\n<p>有时候自动拉取触发会比较频繁，所以有时候需要用到手动刷新，注意看以下的配置。</p>\n<div class=\"amis-preview\" style=\"height: 700px\"><script type=\"text/schema\" height=\"700\" scope=\"form\">[\n  {\n    \"label\": \"数据模板\",\n    \"type\": \"group\",\n    \"labelClassName\": \"text-muted\",\n    \"controls\": [\n      {\n        \"type\": \"select\",\n        \"name\": \"tpl\",\n        \"value\": \"tpl1\",\n        \"mode\": \"inline\",\n        \"options\": [\n          {\n            \"label\": \"模板1\",\n            \"value\": \"tpl1\"\n          },\n          {\n            \"label\": \"模板2\",\n            \"value\": \"tpl2\"\n          },\n          {\n            \"label\": \"模板3\",\n            \"value\": \"tpl3\"\n          }\n        ]\n      },\n      {\n        \"type\": \"button\",\n        \"label\": \"获取\",\n        \"mode\": \"inline\",\n        \"className\": \"p-l-none\",\n        \"actionType\": \"reload\",\n        \"target\": \"servcieName\"\n      }\n    ]\n  },\n  {\n    \"type\": \"service\",\n    \"name\": \"servcieName\",\n    \"api\": {\n      \"method\": \"get\",\n      \"url\": \"https://houtai.baidu.com/api/mock2/form/initData\",\n      \"data\": {\n        \"tpl\": \"${tpl}\"\n      }\n    },\n    \"controls\": [\n      {\n        \"label\": \"名称\",\n        \"type\": \"text\",\n        \"labelClassName\": \"text-muted\",\n        \"name\": \"name\"\n      },\n      {\n        \"label\": \"作者\",\n        \"type\": \"text\",\n        \"labelClassName\": \"text-muted\",\n        \"name\": \"author\"\n      },\n      {\n        \"label\": \"请求时间\",\n        \"type\": \"datetime\",\n        \"labelClassName\": \"text-muted\",\n        \"name\": \"date\"\n      }\n    ]\n  }\n]\n</script></div>\n<p>以上的栗子都是数据拉取，接下来要介绍 service 的另外一个重要功能，就是用它来拉取动态配置项。</p>\n<div class=\"amis-preview\" style=\"height: 400px\"><script type=\"text/schema\" height=\"400\" scope=\"form-item\">{\n  \"type\": \"service\",\n  \"schemaApi\": \"https://houtai.baidu.com/api/mock2/service/schema?type=tabs\"\n}\n</script></div>\n<p>你会发现上面的栗子其实并不是拉取的表单项，如果想直接渲染表单项，请返回这种格式</p>\n<pre><code class=\"lang-js\">{\n  <span class=\"hljs-attribute\">status</span>: <span class=\"hljs-number\">0</span>,\n  <span class=\"hljs-attribute\">msg</span>: <span class=\"hljs-string\">''</span>,\n  <span class=\"hljs-attribute\">data</span>: {\n    <span class=\"hljs-attribute\">controls</span>: [\n      {\n        <span class=\"hljs-attribute\">type</span>: <span class=\"hljs-string\">\"text\"</span>,\n        <span class=\"hljs-attribute\">name</span>: <span class=\"hljs-string\">\"a\"</span>,\n        <span class=\"hljs-attribute\">label</span>: <span class=\"hljs-string\">\"文本输入\"</span>\n      }\n    ]\n  }\n}\n</code></pre>\n<p>比如</p>\n<div class=\"amis-preview\" style=\"height: 600px\"><script type=\"text/schema\" height=\"600\" scope=\"form-item\">{\n  \"type\": \"service\",\n  \"schemaApi\": \"https://houtai.baidu.com/api/mock2/service/schema?type=controls\"\n}\n</script></div>\n<p><code>schemaApi</code> 同样支持上面的联动用法。</p>\n\n\n<div class=\"m-t-lg b-l b-info b-3x wrapper bg-light dk\">文档内容有误？欢迎大家一起来编写，文档地址：<i class=\"fa fa-github\"></i><a href=\"https://github.com/baidu/amis/tree/master/docs/renderers/Form/Service.md\">/docs/renderers/Form/Service.md</a>。</div>",
    "toc": {
      "label": "目录",
      "type": "toc",
      "children": [
        {
          "label": "Service(FormItem)",
          "fragment": "service-formitem-",
          "fullPath": "#service-formitem-",
          "level": 3
        }
      ],
      "level": 0
    }
  };

});
